// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                           Int                            @id @default(autoincrement())
  email                        String                         @unique
  username                     String?                        @unique
  role                         Role                           @default(CUSTOMER)
  name                         String                         @db.VarChar(150)
  password                     String                         @db.VarChar(60)
  active                       Boolean                        @default(true)
  verify_email                 Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  customer                     customer?
  transformation_workshop_user transformation_workshop_user[]
  order                        order[]
}

model customer {
  id            Int       @id @default(autoincrement())
  cpf           String?   @db.VarChar(11)
  cnpj          String?   @db.VarChar(14)
  birthday      DateTime?
  phone         String?
  corporate_name String?   @db.VarChar(150)
  trade_name     String?   @db.VarChar(150)
  user          users     @relation(fields: [user_fk], references: [id])
  user_fk       Int       @unique

  billing_address billing_address_customer?
}

model billing_address_customer {
  id           Int     @id @default(autoincrement())
  cep          String?
  address      String
  number       String
  complement   String? @db.VarChar(100)
  neighborhood String? @db.VarChar(100)
  state        state?  @relation(fields: [state_fk], references: [id])
  state_fk     Int?
  city         city?   @relation(fields: [city_fk], references: [id])
  city_fk      Int?

  customer    customer @relation(fields: [customer_fk], references: [id])
  customer_fk Int      @unique
}

model transformation_workshop {
  id                              Int                               @id @default(autoincrement())
  name                            String
  cnpj                            String?
  cep                             String?                           @db.VarChar(8)
  address                         String?                           @db.VarChar(100)
  number                          String?                           @db.VarChar(10)
  complement                      String?                           @db.VarChar(100)
  neighborhood                    String?                           @db.VarChar(100)
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  transformation_workshop_user    transformation_workshop_user[]
  transformation_workshop_product transformation_workshop_product[]
  state                           state?                            @relation(fields: [state_fk], references: [id])
  state_fk                        Int?
  city                            city?                             @relation(fields: [city_fk], references: [id])
  city_fk                         Int?
  production                      production[]
  order                           order[]
}

model transformation_workshop_product {
  id                         Int                      @id @default(autoincrement())
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  quantity                   Int
  transformation_workshop    transformation_workshop? @relation(fields: [transformation_workshop_fk], references: [id])
  transformation_workshop_fk Int?
  product                    product?                 @relation(fields: [product_fk], references: [id])
  product_fk                 Int?
}

model state {
  id                       Int                        @id @unique(map: "id")
  acronym                  String                     @db.VarChar(2)
  name                     String                     @db.VarChar(20)
  city                     city[]
  transformation_workshop  transformation_workshop[]
  billing_address_customer billing_address_customer[]
}

model city {
  id                       Int                        @id @unique(map: "id")
  state_fk                 Int
  name                     String                     @db.VarChar(50)
  cep_initial              String?                    @db.VarChar(9)
  cep_final                String?                    @db.VarChar(9)
  ddd1                     Int?                       @db.SmallInt
  ddd2                     Int?                       @db.SmallInt
  state                    state                      @relation(fields: [state_fk], references: [id], onUpdate: Restrict, map: "city_ibfk_1")
  transformation_workshop  transformation_workshop[]
  billing_address_customer billing_address_customer[]

  @@index([state_fk], map: "state_fk")
}

model category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
}

model transformation_workshop_user {
  id                         Int                     @id @default(autoincrement())
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  user_fk                    Int
  users                      users                   @relation(fields: [user_fk], references: [id])
  transformation_workshop_fk Int
  transformation_workshop    transformation_workshop @relation(fields: [transformation_workshop_fk], references: [id])
}

model product {
  id                              Int                               @id @default(autoincrement())
  name                            String
  description                     String
  price                           Float?
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  category_fk                     Int
  weight                          Float
  height                          Float
  width                           Float
  length                          Float
  category                        category                          @relation(fields: [category_fk], references: [id])
  production                      production[]
  product_variants                product_variant[]
  transformation_workshop_product transformation_workshop_product[]
  product_image                   product_image[]
  order_item                      order_item[]
}

model product_image {
  id         Int      @id @default(autoincrement())
  img_url    String?
  order      Int?
  product    product? @relation(fields: [product_fk], references: [id])
  product_fk Int?
}

model order {
  id          Int                      @id @default(autoincrement())
  user_fk     Int
  user        users                    @relation(fields: [user_fk], references: [id])
  workshop_fk Int?
  workshop    transformation_workshop? @relation(fields: [workshop_fk], references: [id])

  status       OrderStatus @default(PENDING)
  total_amount Float       @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  order_items    order_item[]
  payment_status PaymentStatus  @default(PENDING)
  payment_method PaymentMethod?

  notes String? @db.VarChar(500)
}

model order_item {
  id       Int   @id @default(autoincrement())
  order_fk Int
  order    order @relation(fields: [order_fk], references: [id])

  product_fk Int
  product    product @relation(fields: [product_fk], references: [id])

  variant_fk Int?
  variant    product_variant? @relation(fields: [variant_fk], references: [id])

  quantity    Int
  unit_price  Float
  total_price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model production {
  id                         Int                     @id @default(autoincrement())
  product_fk                 Int
  product                    product                 @relation(fields: [product_fk], references: [id])
  transformation_workshop_fk Int
  transformation_workshop    transformation_workshop @relation(fields: [transformation_workshop_fk], references: [id])
  quantity                   Int
  date_start                 DateTime?
  date_end                   DateTime?
  status                     String?
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
}

model product_variant {
  id         Int          @id @default(autoincrement())
  product_fk Int
  product    product      @relation(fields: [product_fk], references: [id])
  name       String       @db.VarChar(120)
  price      Float?
  amount     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  order_item order_item[]
}

enum Role {
  CUSTOMER
  SELLER
  SELLER_MANAGER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PRODUCTION
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_SLIP
  CASH
}
