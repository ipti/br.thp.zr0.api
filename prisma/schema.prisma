// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                           Int                            @id @default(autoincrement())
  email                        String                         @unique
  username                     String?                        @unique
  role                         Role                           @default(CUSTOMER)
  name                         String                         @db.VarChar(150)
  password                     String                         @db.VarChar(60)
  active                       Boolean                        @default(true)
  verify_email                 Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  transformation_workshop_user transformation_workshop_user[]
}

model transformation_workshop {
  id                           Int                            @id @default(autoincrement())
  name                         String
  cnpj                         String?
  cep                          String?                        @db.VarChar(8)
  address                      String?                        @db.VarChar(100)
  number                       String?                        @db.VarChar(10)
  complement                   String?                        @db.VarChar(100)
  neighborhood                 String?                        @db.VarChar(100)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  transformation_workshop_user transformation_workshop_user[]
  production                   production[]
  state                        state?                         @relation(fields: [state_fk], references: [id])
  state_fk                     Int?
  city                         city?                          @relation(fields: [city_fk], references: [id])
  city_fk                      Int?
}

model state {
  id                      Int                       @id @unique(map: "id")
  acronym                 String                    @db.VarChar(2)
  name                    String                    @db.VarChar(20)
  city                    city[]
  transformation_workshop transformation_workshop[]
}

model city {
  id                      Int                       @id @unique(map: "id")
  state_fk                Int
  name                    String                    @db.VarChar(50)
  cep_initial             String?                   @db.VarChar(9)
  cep_final               String?                   @db.VarChar(9)
  ddd1                    Int?                      @db.SmallInt
  ddd2                    Int?                      @db.SmallInt
  state                   state                     @relation(fields: [state_fk], references: [id], onUpdate: Restrict, map: "city_ibfk_1")
  transformation_workshop transformation_workshop[]

  @@index([state_fk], map: "state_fk")
}

model category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
}

model transformation_workshop_user {
  id                         Int                     @id @default(autoincrement())
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  user_fk                    Int
  users                      users                   @relation(fields: [user_fk], references: [id])
  transformation_workshop_fk Int
  transformation_workshop    transformation_workshop @relation(fields: [transformation_workshop_fk], references: [id])
}

model product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category_fk    Int
  category       category         @relation(fields: [category_fk], references: [id])
  workshop_stock workshop_stock[]
  production     production[]
}

model workshop_stock {
  id         Int      @id @default(autoincrement())
  product_fk Int
  product    product  @relation(fields: [product_fk], references: [id])
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model production {
  id                         Int                     @id @default(autoincrement())
  product_fk                 Int
  product                    product                 @relation(fields: [product_fk], references: [id])
  transformation_workshop_fk Int
  transformation_workshop    transformation_workshop @relation(fields: [transformation_workshop_fk], references: [id])
  quantity                   Int
  date_start                 DateTime?
  date_end                   DateTime?
  status                     String?
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
}

enum Role {
  CUSTOMER
  SELLER
  SELLER_MANAGER
  ADMIN
}
